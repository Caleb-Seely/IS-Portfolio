---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all projects and sort them by date (newest first)
const projects = await getCollection('projects');
const sortedProjects = projects.sort((a, b) => {
  const dateA = new Date(a.data.date);
  const dateB = new Date(b.data.date);
  return dateB - dateA;
});

// Group projects by month and year
const groupedProjects = {};
sortedProjects.forEach(project => {
  const date = new Date(project.data.date);
  const monthYear = date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
  
  if (!groupedProjects[monthYear]) {
    groupedProjects[monthYear] = [];
  }
  
  groupedProjects[monthYear].push(project);
});

// Process project data for client-side use
const projectsData = sortedProjects.map(project => {
  return {
    slug: project.slug,
    data: {
      title: project.data.title,
      date: project.data.date,
      image: project.data.image,
      materials: project.data.materials
    },
    // Convert the Markdown content to HTML
    content: project.body
  };
});
---

<Layout>
  <section class="px-6 py-16 md:px-16 bg-white text-forest">
    <div class="max-w-6xl mx-auto">
      <h1 class="text-4xl font-bold mb-10 text-center">Projects</h1>

      {Object.entries(groupedProjects).map(([monthYear, monthProjects]) => (
        <div class="mb-12">
          <h2 class="text-2xl font-semibold mb-6 border-b border-forest pb-2">{monthYear}</h2>
          
          <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {monthProjects.map((project) => {
              // Handle multiple images or single image
              const images = Array.isArray(project.data.image) 
                ? project.data.image 
                : [project.data.image];
              const primaryImage = images[0];
              
              return (
                <div 
                  class="bg-sand rounded-xl shadow-md overflow-hidden flex flex-col transition-all hover:shadow-lg cursor-pointer project-card"
                  data-slug={project.slug}
                >
                  <div class="relative h-48">
                    <img src={primaryImage} alt={project.data.title} class="w-full h-full object-cover" />
                    <div class="absolute bottom-0 right-0 bg-forest text-white text-xs px-2 py-1 m-2 rounded-md opacity-75">
                      {new Date(project.data.date).toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric',
                        year: 'numeric'
                      })}
                    </div>
                  </div>

                  <div class="p-4 flex-grow flex flex-col justify-between">
                    <div>
                      <h2 class="text-xl font-bold mb-2">{project.data.title}</h2>
                      <p class="text-sm font-semibold">Materials:</p>
                      <ul class="list-disc list-inside text-sm mb-4">
                        {project.data.materials.map((material) => <li>{material}</li>)}
                      </ul>
                    </div>

                    <div class="mt-auto text-forest font-semibold flex items-center">
                      <span>View Details</span>
                      <svg xmlns="http://www.w3.org/2000/svg" class="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                      </svg>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))}
    </div>
  </section>

  <!-- Project Modal -->
  <div id="projectModal" class="fixed inset-0 bg-black bg-opacity-70 hidden flex items-center justify-center z-50 p-4">
    <div class="bg-white max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-lg shadow-xl">
      <div class="sticky top-0 z-10 bg-white border-b border-gray-200 px-6 py-4 flex justify-between items-center">
        <h2 id="modalTitle" class="text-2xl font-bold text-forest"></h2>
        <button id="closeModal" class="text-gray-500 hover:text-gray-800 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div id="modalContent" class="p-6">
        <!-- Modal content will be loaded here -->
      </div>
    </div>
  </div>

  <!-- Hidden container to pass project data to client script -->
  <script is:inline define:vars={{ projectsData: JSON.stringify(projectsData) }}>
   // Store project data globally
   window.projectsData = JSON.parse(projectsData);
 
   // Define openProjectModal inline
   window.openProjectModal = function (slug) {
     const project = window.projectsData.find(p => p.slug === slug);
     if (!project) return;
 
     const modal = document.getElementById('projectModal');
     const title = document.getElementById('modalTitle');
     const content = document.getElementById('modalContent');
 
     title.textContent = project.data.title;
     
     // Format date
     const projectDate = new Date(project.data.date).toLocaleDateString('en-US', {
       year: 'numeric',
       month: 'long',
       day: 'numeric'
     });

     // Handle multiple images
     const images = Array.isArray(project.data.image) ? project.data.image : [project.data.image];
     const imageGallery = images.length > 1 
       ? `
         <div class="space-y-4">
           <div class="relative">
             <img id="featuredImage" src="${images[0]}" class="w-full h-[400px] object-cover rounded-lg shadow-lg" onclick="expandImage(this.src)" />
           </div>
           <div class="grid grid-cols-4 gap-3">
             ${images.map((img, idx) => `
               <img src="${img}" 
                    class="h-20 w-full object-cover rounded cursor-pointer transition-all hover:opacity-80 ${idx === 0 ? 'ring-2 ring-forest ring-offset-2' : ''}" 
                    onclick="updateFeaturedImage('${img}', this)" 
                    alt="Project image ${idx + 1}"
               />
             `).join('')}
           </div>
         </div>
       `
       : `
         <div class="relative">
           <img src="${images[0]}" class="w-full h-[400px] object-cover rounded-lg shadow-lg" onclick="expandImage(this.src)" />
         </div>
       `;

     // Process the markdown content
     let processedContent = project.content
       // First remove any visible ### that weren't properly processed
       .replace(/^###\s*/gm, '')
       // Process headings (reduced margins)
       .replace(/### (.*?)(?:\n|$)/g, '<h3 class="text-lg font-bold text-forest mt-3 mb-1">$1</h3>')
       .replace(/## (.*?)(?:\n|$)/g, '<h2 class="text-xl font-bold text-forest mt-4 mb-1">$2</h2>')
       // Process lists with tighter spacing
       .replace(/^- (.*?)$/gm, '<li class="mb-0.5">$1</li>')
       .replace(/(<li.*?<\/li>\n?)+/g, '<ul class="list-disc ml-4 mb-3">$&</ul>')
       // Process bold text
       .replace(/\*\*(.*?)\*\*/g, '<strong class="text-forest">$1</strong>')
       // Process paragraphs with less spacing
       .replace(/^(?!<[hul])(.+?)$/gm, '<p class="text-gray-700 leading-relaxed mb-2">$1</p>')
       // Clean up extra newlines
       .replace(/\n{2,}/g, '\n');

     content.innerHTML = `
       <div class="space-y-4">
         <div class="flex items-center text-gray-600 space-x-2">
           <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
           </svg>
           <time datetime="${project.data.date}">${projectDate}</time>
         </div>

         ${imageGallery}

         <div class="grid md:grid-cols-3 gap-6">
           <div class="md:col-span-2">
             <div class="prose max-w-none [&>*:first-child]:mt-0">
               ${processedContent}
             </div>
           </div>
           
           <div>
             <div class="bg-sand p-4 rounded-lg shadow-md sticky top-4">
               <h3 class="font-bold text-lg mb-2 text-forest">Materials Used</h3>
               <ul class="space-y-1">
                 ${project.data.materials.map(material => `
                   <li class="flex items-start">
                     <span class="inline-block w-1.5 h-1.5 bg-forest rounded-full mt-1.5 mr-2 flex-shrink-0"></span>
                     <span class="text-gray-700">${material}</span>
                   </li>
                 `).join('')}
               </ul>
             </div>
           </div>
         </div>
       </div>
     `;
 
     modal.classList.remove('hidden');
     modal.setAttribute('aria-hidden', 'false');
     document.body.classList.add('overflow-hidden');
   }
 
   window.closeModal = function () {
     const modal = document.getElementById('projectModal');
     modal.classList.add('hidden');
     modal.setAttribute('aria-hidden', 'true');
     document.body.classList.remove('overflow-hidden');
   }
 </script>
 

  <script>
    // Event listeners for project cards
    document.addEventListener('DOMContentLoaded', () => {
      // Add click event to all project cards
      document.querySelectorAll('.project-card').forEach(card => {
        card.addEventListener('click', () => {
          const slug = card.getAttribute('data-slug');
          openProjectModal(slug);
        });
      });

      // Set up modal close actions
      document.getElementById('closeModal').addEventListener('click', closeModal);
      document.getElementById('projectModal').addEventListener('click', (e) => {
        if (e.target === document.getElementById('projectModal')) {
          closeModal();
        }
      });
      
      // Add keyboard event listener for escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeModal();
        }
      });
    });

    
    // Functions for image handling
    window.expandImage = function(imageSrc) {
      const modalContent = document.getElementById('modalContent');
      const currentContent = modalContent.innerHTML;
      
      modalContent.innerHTML = `
        <div class="fixed inset-0 bg-black bg-opacity-90 z-50 flex flex-col justify-center items-center">
          <div class="max-w-full max-h-[80vh] p-4">
            <img src="${imageSrc}" alt="Expanded view" class="max-h-full max-w-full object-contain">
          </div>
          <button id="backToDetails" class="mt-4 bg-forest text-white px-4 py-2 rounded hover:bg-opacity-90 transition-colors">
            Back to details
          </button>
        </div>
      `;
      
      document.getElementById('backToDetails').addEventListener('click', () => {
        modalContent.innerHTML = currentContent;
      });
    };
    
    window.updateFeaturedImage = function(imageSrc, clickedElement) {
      const featuredImage = document.getElementById('featuredImage');
      featuredImage.src = imageSrc;
      featuredImage.setAttribute('onclick', `expandImage('${imageSrc}')`);
      
      // Update thumbnail selection visuals
      document.querySelectorAll('.grid-cols-4 img').forEach(img => {
        img.classList.remove('ring-2', 'ring-forest');
      });
      clickedElement.classList.add('ring-2', 'ring-forest');
    };
  </script>
</Layout>